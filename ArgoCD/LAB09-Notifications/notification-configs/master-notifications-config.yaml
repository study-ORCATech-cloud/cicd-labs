apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-notifications-cm
  namespace: argocd
data:
  # Service configuration
  service.slack: |
    token: $slack-webhook-url
  
  # Templates
  template.app-sync-succeeded: |
    slack:
      title: "‚úÖ Application Synced Successfully"
      text: |
        Application **{{.app.metadata.name}}** has been successfully synced to **{{.app.spec.destination.namespace}}**.
        
        *Environment:* {{.app.metadata.labels.environment | default "unknown"}}
        *Repository:* {{.app.spec.source.repoURL}}
        *Revision:* {{.app.status.sync.revision | truncate 8}}
        *Health:* {{.app.status.health.status}}
      color: "good"
      attachments: |
        [{
          "title": "Application Details",
          "title_link": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
          "color": "good",
          "fields": [
            {
              "title": "Repository",
              "value": "{{.app.spec.source.repoURL}}",
              "short": true
            },
            {
              "title": "Revision",
              "value": "{{.app.status.sync.revision | truncate 8}}",
              "short": true
            },
            {
              "title": "Environment",
              "value": "{{.app.metadata.labels.environment | default \"unknown\"}}",
              "short": true
            },
            {
              "title": "Namespace",
              "value": "{{.app.spec.destination.namespace}}",
              "short": true
            }
          ]
        }]
  
  template.app-sync-failed: |
    slack:
      title: "‚ùå Application Sync Failed"
      text: |
        Application **{{.app.metadata.name}}** failed to sync in **{{.app.spec.destination.namespace}}**.
        
        *Environment:* {{.app.metadata.labels.environment | default "unknown"}}
        *Error:* {{.app.status.operationState.message | truncate 100}}
        *Repository:* {{.app.spec.source.repoURL}}
      color: "danger"
      attachments: |
        [{
          "title": "Sync Failure Details",
          "title_link": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
          "color": "danger",
          "fields": [
            {
              "title": "Error Message",
              "value": "{{.app.status.operationState.message | truncate 200}}",
              "short": false
            },
            {
              "title": "Repository",
              "value": "{{.app.spec.source.repoURL}}",
              "short": true
            },
            {
              "title": "Environment",
              "value": "{{.app.metadata.labels.environment | default \"unknown\"}}",
              "short": true
            }
          ]
        }]
  
  template.app-health-degraded: |
    slack:
      title: "üî¥ Application Health Degraded"
      text: |
        Application **{{.app.metadata.name}}** health has degraded to **{{.app.status.health.status}}**.
        
        *Environment:* {{.app.metadata.labels.environment | default "unknown"}}
        *Current Health:* {{.app.status.health.status}}
        *Message:* {{.app.status.health.message | default "No additional details"}}
      color: "danger"
  
  template.production-alert: |
    slack:
      title: "üö® PRODUCTION ALERT"
      text: |
        **PRODUCTION ISSUE DETECTED**
        
        Application: **{{.app.metadata.name}}**
        Environment: **PRODUCTION**
        Issue: {{.app.status.health.status}} / {{.app.status.sync.status}}
        
        <!channel> - Immediate attention required!
      color: "danger"
  
  # Triggers
  trigger.on-sync-failed: |
    - when: app.status.operationState.phase in ['Error', 'Failed']
      send: [app-sync-failed]
  
  trigger.on-sync-succeeded: |
    - when: app.status.operationState.phase == 'Succeeded'
      send: [app-sync-succeeded]
  
  trigger.on-health-degraded: |
    - when: app.status.health.status != 'Healthy'
      send: [app-health-degraded]
  
  trigger.on-production-issue: |
    - when: (app.status.operationState.phase in ['Error', 'Failed'] or app.status.health.status != 'Healthy') and app.metadata.labels.environment == 'production'
      send: [production-alert] 