name: Secrets and Contexts Demo

# TODO: Configure the workflow to run on push events to the 'main' branch
# and also allow manual triggering via workflow_dispatch.
on:
  # push:
  #   branches: ['main']
  # workflow_dispatch:

jobs:
  demonstrate_secrets_and_contexts:
    # TODO: Specify the operating system for the runner (e.g., ubuntu-latest).
    runs-on: # ubuntu-latest

    # TODO: Define a job-level environment variable named 'JOB_LEVEL_ENV_VAR'
    # with any string value you like (e.g., "I am a job-level variable").
    env:
      # JOB_LEVEL_ENV_VAR: "I am a job-level variable"

    steps:
      - name: Checkout code
        # TODO: Use the actions/checkout@v3 action.
        uses: # actions/checkout@v3

      - name: Display GitHub Context Information
        # TODO: Write a script to print the following from the 'github' context:
        #   - The GitHub username of the actor who initiated the workflow (github.actor)
        #   - The name of the repository (github.repository)
        #   - The event that triggered the workflow (github.event_name)
        #   - The Git ref (branch or tag) that triggered the workflow (github.ref)
        run: |
          echo "Workflow triggered by: ____" # e.g., ${{ github.actor }}
          echo "Repository name: ____"      # e.g., ${{ github.repository }}
          echo "Event type: ____"           # e.g., ${{ github.event_name }}
          echo "Git Ref: ____"              # e.g., ${{ github.ref }}

      - name: Display Runner Context Information
        # TODO: Write a script to print the following from the 'runner' context:
        #   - The operating system of the runner (runner.os)
        #   - The temporary directory path on the runner (runner.temp)
        run: |
          echo "Runner OS: ____"                  # e.g., ${{ runner.os }}
          echo "Runner temporary directory: ____" # e.g., ${{ runner.temp }}

      - name: Access Job-Level Environment Variable
        # TODO: Write a script to print the value of the 'JOB_LEVEL_ENV_VAR' defined at the job level.
        # Hint: Environment variables are directly accessible in shell scripts.
        run: |
          echo "Job-level environment variable: $JOB_LEVEL_ENV_VAR"

      - name: Access a Secret (Securely)
        # IMPORTANT: This lab requires you to pre-configure a secret named 'MY_SECRET_VALUE'
        # in your repository settings (Settings > Secrets and variables > Actions).
        # TODO: Write a script that accesses the secret 'MY_SECRET_VALUE'.
        # DO NOT print the secret directly. Instead, print its length to demonstrate it's accessible.
        # Hint: Pass the secret to the step's environment using 'env:' and then access it.
        env:
          EXAMPLE_SECRET: ${{ secrets.MY_SECRET_VALUE }}
        run: |
          echo "Attempting to access MY_SECRET_VALUE..."
          if [ -n "$EXAMPLE_SECRET" ]; then
            echo "Length of MY_SECRET_VALUE: ${#EXAMPLE_SECRET}"
            echo "MY_SECRET_VALUE is set."
          else
            echo "MY_SECRET_VALUE is not set or is empty. Please ensure it is configured in repository secrets."
          fi

      - name: Access Step-Level Environment Variable
        # TODO: Define a step-level environment variable named 'STEP_LEVEL_ENV_VAR'
        # with any string value (e.g., "I am a step-level variable for this specific step").
        # Then, write a script to print its value.
        env:
          # STEP_LEVEL_ENV_VAR: "I am a step-level variable"
        run: |
          echo "Step-level environment variable: $STEP_LEVEL_ENV_VAR" 